{"version":3,"sources":["APIContext.js","GlobalFuncs.js","folder/FolderSidebar.js","note/NoteSidebar.js","folder/FolderContents.js","PostError.js","folder/AddFolder.js","note/Note.js","note/AddNote.js","NavError.js","NoteError.js","main/NotFoundMain.js","App.js","index.js"],"names":["React","createContext","notes","folders","addFolder","deleteNote","BASE_URL","findNote","noteId","find","note","id","getNotes","folderId","filter","FolderSidebar","this","context","props","match","params","map","folder","className","to","name","type","onClick","e","history","push","Component","defaultProps","contextType","APIContext","NoteSidebar","currentNote","currentFolder","findFolder","console","log","FolderContents","handleClickDelete","preventDefault","fetch","target","method","headers","then","res","ok","json","Promise","reject","catch","error","format","Date","modified","onDeleteNote","PostError","state","hasError","children","AddFolder","value","touched","trim","length","setState","onSubmit","body","JSON","stringify","Error","data","getStateUpdate","goBack","handleSubmitFolder","htmlFor","onChange","updateName","disabled","validateName","onAddFolder","Note","cols","rows","content","AddNote","now","handleSubmitNote","updateContent","updateFolder","NoteError","NotFoundMain","App","all","notesRes","foldersRes","handleDeleteNote","Provider","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10e075b8.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({\n    notes: [],\n    folders: [],\n    addFolder: () => {},\n    deleteNote: () => {},\n})","// get the notes/folders from state via context\n\nexport const BASE_URL = 'http://localhost:9090'\n\nexport const findFolder = (folders=[], folderId) =>  folders.find(folder => folder.id === folderId)\n\nexport const findNote = (notes=[], noteId) =>  notes.find(note => note.id === noteId)\n\nexport const getNotes = (notes=[], folderId) => (!folderId) ? notes : notes.filter(note => note.folderId === folderId) \n\nexport const getNoteCount = (notes=[], folderId) => notes.filter(note => note.folderId === folderId).length","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport APIContext from '../APIContext'\nimport PropTypes from 'prop-types'\n\nexport default class FolderSidebar extends React.Component {\n    //pass the params\n    static defaultProps = {\n        match: {\n            params: {}\n        },\n        history: {\n            push: {}\n        }\n    }\n    //pass the folders and notes\n    static contextType = APIContext\n    render() {\n        const { folders=[] } = this.context\n        const { folderId } = this.props.match.params\n        const showFolders = () => {\n            return folders.map(folder => {\n                return folderId === folder.id\n                    ? <li className='activeFolder'><Link key={folder.id} to={`/folder/${folder.id}`}>{folder.name}</Link></li>\n                    : <li><Link key={folder.id} to={`/folder/${folder.id}`}>{folder.name}</Link></li>\n            })\n        }\n        return (\n            <ul>\n                {showFolders()}\n                <li><button type=\"button\" className=\"add-folder-btn\" onClick={e => this.props.history.push('/new-folder')}>Add Folder</button></li>\n            </ul>\n        )\n    }\n}\n\nFolderSidebar.propTypes = {\n    match: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n}","import React from 'react'\nimport APIContext from '../APIContext'\nimport { findNote, findFolder } from '../GlobalFuncs'\nimport PropTypes from 'prop-types'\n\nexport default class NoteSidebar extends React.Component {\n    //pass the params\n    static defaultProps = {\n        match: {\n            params: {}\n        }\n    }\n    //pass the folders and notes\n    static contextType = APIContext\n    \n    render() {\n        const { notes=[], folders=[] } = this.context\n        const { noteId } = this.props.match.params\n        \n        const currentNote = findNote(notes, noteId) || {}\n        const currentFolder = !currentNote.folderId ? {name:''} : findFolder(folders, currentNote.folderId)\n        console.log(currentFolder)\n        return (\n            <section>\n                <h2>{currentFolder.name}</h2>\n            </section>\n        )\n    }\n}\nNoteSidebar.propTypes = {\n    match: PropTypes.object.isRequired,\n}\n","import React from 'react'\nimport { format } from 'date-fns'\nimport { Link, Redirect } from 'react-router-dom'\nimport APIContext from '../APIContext'\nimport { getNotes, BASE_URL } from '../GlobalFuncs'\nimport PropTypes from 'prop-types'\n\nexport default class FolderContents extends React.Component {\n    //pass the params\n    static defaultProps = {\n        match: {\n            params: {}\n        },\n        onDeleteNote: () => {}\n    }\n    //pass the folders and notes\n    static contextType = APIContext\n\n    render() { \n        const { notes=[] } = this.context\n        const { folderId } = this.props.match.params\n        const handleClickDelete = e => {\n            e.preventDefault()\n            fetch(`${BASE_URL}/notes/${e.target.name}`, {\n              method: 'DELETE',\n              headers: {\n                'content-type': 'application/json'\n              },\n            })\n              .then(res => {\n                if (!res.ok)\n                  return res.json().then(e => Promise.reject(e))\n                return res.json()\n              })\n              .then(() => {\n                this.context.deleteNote(e.target.name)\n              })\n              .catch(error => {\n                console.error({ error })\n              })\n        }\n        const displayNotes = () => {\n            const notesToShow = getNotes(notes, folderId)\n            return notesToShow.map(note => {\n                return (\n                    <li key={note.id} className='note'>\n                        {/* add link to note */}\n                        <h2><Link to={`/note/${note.id}`}>{note.name}</Link></h2>\n                        <p>Date modified: {format(new Date(note.modified), 'MM/dd/yyyy')}</p>\n                        <button type=\"button\" name={note.id} onClick={handleClickDelete}>Delete Note</button>\n                    </li>\n                )\n            })\n        }\n        if (getNotes(notes, folderId) !== ' ') {\n        return (\n            <ul>\n                <li><button type=\"button\" className=\"add-note-btn\" onClick={e => this.props.history.push('/new-note')}>Add Note</button></li>\n                {displayNotes()}\n            </ul>\n        )}\n        return (<Redirect to={'/'}/>)\n    }\n} \n\nFolderContents.propTypes = {\n  match: PropTypes.object.isRequired,\n  onDeleteNote: PropTypes.func,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class PostError extends React.Component {\n    state = {\n        hasError: false\n    }\n    static getDerivedStateFromError(error) {\n        return {hasError:true}\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h2>Cannot allow new note or folder.</h2>\n        }\n        return this.props.children\n    }\n}\n\nPostError.propTypes = {\n    children: PropTypes.element\n}","import React from 'react'\nimport { BASE_URL } from '../GlobalFuncs'\nimport APIContext from '../APIContext'\nimport PropTypes from 'prop-types'\n\nimport PostError from '../PostError'\n\n\nexport default class AddFolder extends React.Component {\n    state= {\n        name: {\n            value: '',\n            touched: false\n        }\n    }\n    static defaultProps = {\n        match: {\n            params: {}\n        },\n        history: {\n            goBack: ()=>{}\n        },\n        onAddFolder: () => {}\n    }\n    //pass the folders and notes\n    static contextType = APIContext\n\n    validateName() {\n        const name = this.state.name.value.trim()\n        if (name.length === 0) {\n            return \"Name is required\"\n        } else if (this.context.folders.find(folder => folder.name === name)) {\n            return \"Name must be unique\"\n        }\n    }\n    updateName(name) {\n        this.setState({ name: { value: name, touched: true } });\n    }\n\n    render() { \n        const handleSubmitFolder = e => {\n            e.preventDefault()\n            console.log(this.state.name.value)\n            fetch(`${BASE_URL}/folders`, {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json'\n              },\n              body: JSON.stringify({ name: this.state.name.value })\n            })\n              .then(res => {\n                if (!res.ok)\n                  throw new Error('Cannot add this folder')\n                return res.json()\n              })\n              .then((data) => {\n                this.context.getStateUpdate()\n                this.props.history.goBack()\n              })\n              .catch(error => {\n                console.error({ error })\n              })\n        }\n        return (\n            <PostError>\n                <section className=\"addNewFolder\">\n                    <form className=\"new-folder-form\" onSubmit={e => handleSubmitFolder(e)}>\n                        <h2>Create a New Folder</h2>\n                        <label htmlFor=\"folder-input\">Folder name:</label>\n                        <input \n                            type=\"text\"\n                            id=\"folder-input\"\n                            onChange={e => this.updateName(e.target.value)}\n                        ></input>\n                        <button \n                            type=\"submit\"\n                            disabled={\n                                this.validateName()\n                            }\n                        >Add folder</button>\n                        <p className=\"errors\">{this.state.name.touched ? this.validateName() : ''}</p>\n                    </form>\n                </section>'\n            </PostError>\n        )\n    }\n}\n\nAddFolder.propTypes = {\n  match: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  onAddFolder: PropTypes.func\n}","import React from 'react'\nimport { Link, Redirect } from 'react-router-dom'\nimport { format } from 'date-fns'\nimport PropTypes from 'prop-types'\n\nimport { BASE_URL, findNote } from '../GlobalFuncs'\n\nimport APIContext from '../APIContext'\n\nexport default class Note extends React.Component {\n    //pass the params\n    static defaultProps = {\n        match: {\n            params: {}\n        },\n        history: {\n            push: ()=>{}\n        },\n        onDeleteNote: () => {}\n    }\n    //pass the folders and notes\n    static contextType = APIContext\n\n    render() {\n        const { notes=[] } = this.context\n        const { noteId } = this.props.match.params\n        const handleClickDelete = e => {\n            e.preventDefault()\n        \n            fetch(`${BASE_URL}/notes/${noteId}`, {\n              method: 'DELETE',\n              headers: {\n                'content-type': 'application/json'\n              },\n            })\n              .then(res => {\n                if (!res.ok)\n                  return res.json().then(e => Promise.reject(e))\n                return res.json()\n              })\n              .then(() => {\n                this.context.deleteNote(noteId)\n              })\n              .catch(error => {\n                console.error({ error })\n              })\n        }\n        \n        const currentNote = findNote(notes,noteId)\n        if (currentNote) {\n        return (\n            <section>\n                <div className='note'>\n                    <h2><Link to={`/note/${currentNote.id}`}>{currentNote.name}</Link></h2>\n                    <p>Date modified: {format(new Date(currentNote.modified), 'MM/dd/yyyy')}</p>\n                    <button type=\"button\"onClick={handleClickDelete}>Delete Note</button>\n                </div>\n                <textarea cols='60' rows='20' value={currentNote.content}></textarea>\n            </section>\n        )}\n        return (<Redirect to={'/'}/>)\n    }\n}\n\nNote.propTypes = {\n  match: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  onDeleteNote: PropTypes.func\n}","import React from 'react'\nimport { format } from 'date-fns'\nimport { BASE_URL } from '../GlobalFuncs'\nimport PropTypes from 'prop-types'\nimport APIContext from '../APIContext'\n\nimport PostError from '../PostError'\n\nexport default class AddNote extends React.Component {\n    state= {\n        name: {\n            value: '',\n            touched: false\n        },\n        content: {\n            value: '',\n            touched: false\n        },\n        folder: {\n            value: '',\n            touched: false\n        }\n    }\n    static defaultProps = {\n        match: {\n            params: {}\n        },\n        history: {\n            goBack: ()=>{}\n        },\n    }\n    //pass the folders and notes\n    static contextType = APIContext\n\n    validateName() {\n        const name = this.state.name.value.trim()\n        if (name.length === 0) {\n            return \"Name is required\"\n        }\n    }\n    updateName(name) {\n        this.setState({ name: { value: name, touched: true } });\n    }\n    validateContent() {\n        const name = this.state.name.value.trim()\n        if (name.length === 0) {\n            return \"Name is required\"\n        }\n    }\n    updateContent(content) {\n        this.setState({ content: { value: content, touched: true } });\n    }\n    updateFolder(id) {\n        this.setState({ folder: { value: id, touched: true } });\n    }\n\n    render() {\n        const { folders=[] } = this.context\n        const now = format(new Date(), 'yyyy-MM-dd') + 'T00:00:00.000Z'\n        console.log(now)\n        const handleSubmitNote = e => {\n            e.preventDefault()\n            console.log(this.state.name.value)\n            fetch(`${BASE_URL}/notes`, {\n              method: 'POST',\n              headers: {\n                'content-type': 'application/json'\n              },\n              body: JSON.stringify({ name: this.state.name.value, modified: now, folderId: this.state.folder.value, content: this.state.content.value})\n            })\n              .then(res => {\n                if (!res.ok)\n                  throw new Error('Cannot add this note')\n                return res.json()\n              })\n              .then((data) => {\n                this.context.getStateUpdate()\n                this.props.history.goBack()\n              })\n              .catch(error => {\n                console.error({ error })\n              })\n        }\n        const folderOptions = () => {\n            return folders.map(folder => {\n                return <option key={folder.id} value={folder.id}>{folder.name}</option>\n            })\n        }\n        return (\n            <PostError>\n                <section className=\"addNewNote\">\n                    <form className=\"new-note-form\" onSubmit={e => handleSubmitNote(e)}>\n                        <h2>Create a New Note</h2>\n                        <label htmlFor=\"folder-input\">Name:</label>\n                        <input \n                            type=\"text\"\n                            id=\"name-input\"\n                            onChange={e => this.updateName(e.target.value)}\n                        ></input>\n                        <p className=\"errors\">{this.state.name.touched ? this.validateName() : ''}</p>\n                        <label htmlFor=\"content-input\">Note:</label>\n                        <textarea\n                            type=\"text\"\n                            id=\"content-input\"\n                            onChange={e => this.updateContent(e.target.value)}\n                            rows={20}\n                        ></textarea>\n                        <label htmlFor=\"folder-selection\">Folder:</label>\n                        <select\n                            id=\"folder-selection\"\n                            onChange={e => this.updateFolder(e.target.value)}\n                        >\n                            {folderOptions()}\n                        </select>\n                        <button \n                            className=\"submit-note\"\n                            type=\"submit\"\n                            disabled={\n                                this.validateName()\n                            }\n                        >Add Note</button>\n                    </form>\n                </section>\n            </PostError>\n        )\n    }\n}\n\nAddNote.propTypes = {\n    match: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class PostError extends React.Component {\n    state = {\n        hasError: false\n    }\n    static getDerivedStateFromError(error) {\n        return {hasError:true}\n    }\n    render() {\n        if (this.state.hasError) {\n            return <div><p>Could not display navigation</p></div>\n        }\n        return this.props.children\n    }\n}\n\nPostError.propTypes = {\n    children: PropTypes.element\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default class NoteError extends React.Component {\n    state = {\n        hasError: false\n    }\n    static getDerivedStateFromError(error) {\n        return {hasError:true}\n    }\n    render() {\n        if (this.state.hasError) {\n            return <h2>This note or list of notes could not be displayed.</h2>\n        }\n        return this.props.children\n    }\n}\n\n\nNoteError.propTypes = {\n    children: PropTypes.element\n}","import React from 'react'\n\nexport default function NotFoundMain() {\n    return (\n        <section className=\"notFound\">\n            <h2>This page cannot be found!</h2>\n            <p>This page either does not exist or is missing! Please navigate elsewhere.</p>\n        </section>\n    )\n}","import React from 'react';\nimport { Route, Link, Switch } from 'react-router-dom';\n\nimport APIContext from './APIContext'\n\nimport { BASE_URL } from './GlobalFuncs'\n\nimport './App.css'\n\nimport FolderSidebar from './folder/FolderSidebar'\nimport NoteSidebar from './note/NoteSidebar'\n\nimport FolderContents from './folder/FolderContents'\nimport AddFolder from './folder/AddFolder'\n\nimport Note from './note/Note'\nimport AddNote from './note/AddNote'\n\nimport NavError from './NavError'\nimport NoteError from './NoteError'\n\nimport NotFoundMain from './main/NotFoundMain'\n\n\n\nclass App extends React.Component {\n  state = {\n    folders: [],\n    notes: [].notes\n  }\n  componentDidMount() {\n    console.log('mounting app!')\n    this.getStateUpdate()\n  }\n  getStateUpdate = ()=> {    \n    Promise.all([\n    fetch(`${BASE_URL}/notes`),\n    fetch(`${BASE_URL}/folders`),\n  ])\n    .then(([notesRes, foldersRes]) => {\n      if (!notesRes.ok)\n        return notesRes.json().then(e => Promise.reject(e))\n      if (!foldersRes.ok)\n        return foldersRes.json().then(e => Promise.reject(e))\n\n      return Promise.all([notesRes.json(), foldersRes.json()])\n    })\n    .then(([notes, folders]) => {\n      this.setState({notes, folders})\n    })\n    .catch(error => {\n      console.error({error})\n    })}\n  handleDeleteNote = noteId => {\n    this.setState({\n      notes: this.state.notes.filter(note => note.id !== noteId)\n    })\n  }\n\n  render(){\n    const value = {\n      notes: this.state.notes,\n      folders: this.state.folders,\n      deleteNote: this.handleDeleteNote,\n      getStateUpdate: this.getStateUpdate \n    }\n    \n    return (\n      <APIContext.Provider value={ value }>\n        <>\n        <header>\n          <h1><Link className=\"appTitle\" to={'/'}>Noteful</Link></h1>\n        </header>\n        <main>\n          <nav>\n            <NavError>\n              <Switch>\n                <Route \n                  exact path='/' \n                  component={FolderSidebar}\n                />\n                <Route \n                  path='/folder/:folderId' \n                  component={FolderSidebar}\n                />\n                <Route \n                  path='/note/:noteId' \n                  component={NoteSidebar}\n                />\n                <Route \n                  component={FolderSidebar}\n                />\n              </Switch>\n            </NavError>\n          </nav>\n          <section className=\"output\">\n            <NoteError>\n            <Switch>\n              <Route \n                exact path='/' \n                component={FolderContents}\n              />\n              <Route \n                path='/new-folder'\n                component={AddFolder}\n              />\n              <Route\n                path='/new-note'\n                component={AddNote}\n              />\n              <Route \n                path='/folder/:folderId'\n                component={FolderContents}\n              />\n              <Route \n                path='/note/:noteId' \n                component={Note}\n              />\n              <Route component={NotFoundMain} />\n            </Switch>\n            </NoteError>\n          </section>\n        </main>\n        </>\n      </APIContext.Provider>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}